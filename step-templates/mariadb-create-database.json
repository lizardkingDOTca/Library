{
    "Id": "2bdfe600-e205-43f9-b174-67ee5d36bf5b",
    "Name": "MariaDB - Create Database If Not Exists",
    "Description": "Creates a MariaDB database if it doesn't already exist.",
    "ActionType": "Octopus.Script",
    "Version": 6,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled {\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName)) {\n        # It is installed\n        return $true\n    }\n    else {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule {\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n    # Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false) {\n        # Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n    # Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled {\n    # See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-DatabaseExists {\n    # Define parameters\n    param ($DatabaseName)\n    \n    # Execute query\n    return Invoke-SqlQuery \"SHOW DATABASES LIKE '$DatabaseName';\"\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true) {\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true) {\n    # Use specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n\n# Declare initial connection string\n$connectionString = \"Server=$createMariaDBServerName;Port=$createPort;\"\n\n# Update the connection string based on authentication method\nswitch ($mariaDbAuthenticationMethod) {\n    \"awsiam\" {\n        # Region is part of the RDS endpoint, extract\n        $region = ($createMariaDBServerName.Split(\".\"))[2]\n\n        Write-Host \"Generating AWS IAM token ...\"\n        $createUserPassword = (aws rds generate-db-auth-token --hostname $createMariaDBServerName --region $region --port $createPort --username $createUsername)\n        \n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n\n        break\n    }\n    \"usernamepassword\" {\n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n        \n        break    \n    }\n    \"windowsauthentication\" {\n        # Append remaining portion of connection string\n        $connectionString += \";IntegratedSecurity=yes;Uid=$createUsername;\"\n\n        break\n    }\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\ntry {\n    # Connect to MySQL\n    Open-MySqlConnection -ConnectionString $connectionString\n\n    # See if database exists\n    $databaseExists = Get-DatabaseExists -DatabaseName $createDatabaseName\n\n    if ($databaseExists.ItemArray.Count -eq 0) {\n        # Create database\n        Write-Output \"Creating database $createDatabaseName ...\"\n        $executionResult = Invoke-SqlUpdate \"CREATE DATABASE $createDatabaseName;\"\n\n        # Check result\n        if ($executionResult -ne 1) {\n            # Commit transaction\n            Write-Error \"Create schema failed.\"\n        }\n        else {\n            # See if it was created\n            $databaseExists = Get-DatabaseExists -DatabaseName $createDatabaseName\n            \n            # Check array\n            if ($databaseExists.ItemArray.Count -eq 1) {\n                # Success\n                Write-Output \"$createDatabaseName created successfully!\"\n            }\n            else {\n                # Failed\n                Write-Error \"$createDatabaseName was not created!\"\n            }\n        }\n    }\n    else {\n        # Display message\n        Write-Output \"Database $createDatabaseName already exists.\"\n    }\n}\nfinally {\n    Close-SqlConnection\n}\n"
    },
    "Parameters": [
      {
        "Id": "8fc92b80-5122-44a0-b3d8-a1d022a35055",
        "Name": "createMariaDBServerName",
        "Label": "Server",
        "HelpText": "Hostname (or IP) of the MariaDB database server.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "df993ccf-71ab-48de-9a67-e2af6653d35e",
        "Name": "createUsername",
        "Label": "Username",
        "HelpText": "Username to use for the connection",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "8a07f25d-a7db-466e-a356-9155cbc5f258",
        "Name": "createUserPassword",
        "Label": "Password",
        "HelpText": "Password for the user account",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "2af18465-c8d1-48f6-afce-1b1b30ae9559",
        "Name": "createDatabaseName",
        "Label": "Database Name",
        "HelpText": "Name of the database to create",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "f55e2a34-7a82-4d92-83bb-a19f304774d8",
        "Name": "createPort",
        "Label": "Port",
        "HelpText": "Port for the database instance.",
        "DefaultValue": "3306",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "22bcb486-c796-412d-a7bc-e1a3e0d854a3",
        "Name": "mariaDbAuthenticationMethod",
        "Label": "Authentication Method",
        "HelpText": "Method used to authenticate to the MariaDB server.",
        "DefaultValue": "usernamepassword",
        "DisplaySettings": {
            "Octopus.ControlType": "Select",
            "Octopus.SelectOptions": "awsiam|AWS EC2 IAM Role\nusernamepassword|Username\\Password"
        }
    }
    ],
    "LastModifiedBy": "coryreid",
    "StepPackageId": "Octopus.Script",
    "$Meta": {
        "ExportedAt": "2022-07-12T19:34:19.067Z",
        "OctopusVersion": "2022.3.2617-hotfix.4278",
        "Type": "ActionTemplate"
    },
    "Category": "mariadb"
  }
