{
    "Id": "fc7272be-779c-4ef2-8051-0e7271471328",
    "Name": "MySQL - Add Database User To Role",
    "Description": "Adds a database user to a role",
    "Author": "twerthi",
    "ActionType": "Octopus.Script",
    "Version": 7,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "# Define variables\n$connectionName = \"OctopusDeploy\"\n\n# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-UserInRole\n{\n\t# Define parameters\n    param ($UserHostname,\n    $Username,\n    $RoleHostName,\n    $RoleName)\n    \n\t# Execute query\n    $grants = Invoke-SqlQuery \"SHOW GRANTS FOR '$Username'@'$UserHostName';\" -ConnectionName $connectionName\n\n    # Loop through Grants\n    foreach ($grant in $grants.ItemArray)\n    {\n        # Check grant\n        if ($grant -eq \"GRANT ``$RoleName``@``$RoleHostName`` TO ``$Username``@``$UserHostName``\")\n        {\n            # They're in the group\n            return $true\n        }\n    }\n\n    # Not found\n    return $false\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Import from specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Declare connection string\n$connectionString = \"Server=$addMySQLServerName;Port=$addMySQLServerPort;\"\n\n# Customize connection string based on authentication method\nswitch ($mySqlAuthenticationMethod) {\n    \"awsiam\" {\n        # Region is part of the RDS endpoint, extract\n        $region = ($addMySQLServerName.Split(\".\"))[2]\n\n        Write-Host \"Generating AWS IAM token ...\"\n        $addLoginPasswordWithAddRoleRights = (aws rds generate-db-auth-token --hostname $addMySQLServerName --region $region --port $addMySQLServerPort --username $addLoginWithAddRoleRights)\n        \n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"\n\n        break\n    }\n\n    \"usernamepassword\" {\n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"\n        \n        break    \n    }\n\n    \"windowsauthentication\" {\n        # Append remaining portion of connection string\n        $connectionString += \";IntegratedSecurity=yes;Uid=$addLoginWithAddRoleRights;\"\n\n        break\n    }\n\n    \"azuremanagedidentity\" {\n        Write-Host \"Generating Azure Managed Identity token ...\"\n        $token = Invoke-RestMethod -Method GET -Uri \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://ossrdbms-aad.database.windows.net\" -Headers @{\"MetaData\" = \"true\" }\n\n        $addLoginPasswordWithAddRoleRights = $token.access_token\n\n        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"\n\n        break\n    }\n\n    \"gcpserviceaccount\" {\n        # Define header\n        $header = @{ \"Metadata-Flavor\" = \"Google\" }\n\n        # Retrieve service accounts\n        $serviceAccounts = Invoke-RestMethod -Method Get -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\" -Headers $header\n\n        # Results returned in plain text format, get into array and remove empty entries\n        $serviceAccounts = $serviceAccounts.Split([Environment]::NewLine, [StringSplitOptions]::RemoveEmptyEntries)\n\n        # Retreive the specific service account assigned to the VM\n        $serviceAccount = $serviceAccounts | Where-Object { $_.Contains(\"iam.gserviceaccount.com\") }\n\n        if ([string]::IsNullOrWhiteSpace(($addLoginWithAddRoleRights))) {\n            $addLoginWithAddRoleRights = $serviceAccount.SubString(0, $serviceAccount.IndexOf(\".gserviceaccount.com\"))\n        }\n\n        Write-Host \"Generating GCP IAM token ...\"\n        # Retrieve token for account\n        $token = Invoke-RestMethod -Method Get -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/$serviceAccount/token\" -Headers $header\n        \n        $addLoginPasswordWithAddRoleRights = $token.access_token\n        $connectionString += \";Uid=$addLoginWithAddRoleRights;Pwd=`\"$addLoginPasswordWithAddRoleRights`\";\"\n\n        break\n    }\n}\n\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\ntry\n{\n    if ($addUseSSL -eq \"True\")\n    {\n    \t# Append to connection string\n        $connectionString += \"SslMode=Required;\"\n    }\n    else\n    {\n    \t# Disable SSL\n        $connectionString += \"SslMode=none;\"\n    }\n    \n    if (![string]::IsNullOrWhitespace($mysqlAdditionalParameters))\n    {\n      foreach ($parameter in $mysqlAdditionalParameters.Split(\",\"))\n      {\n          # Check for delimiter\n          if (!$connectionString.EndsWith(\";\") -and !$parameter.StartsWith(\";\"))\n          {\n              # Append delimeter\n              $connectionString +=\";\"\n          }\n\n          $connectionString += $parameter.Trim()\n      }\n    }\n   \n    \n    Open-MySqlConnection -ConnectionString $connectionString -ConnectionName $connectionName\n    \n\n    # See if database exists\n    $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleHostName $addRoleHostName -RoleName $addRoleName\n\n    if ($userInRole -eq $false)\n    {\n        # Create database\n        Write-Output \"Adding user $addUsername@$addUserHostName to role $addRoleName@$addRoleHostName ...\"\n        $executionResults = Invoke-SqlUpdate \"GRANT '$addRoleName'@'$addRoleHostName' TO '$addUsername'@'$addUserHostName';\" -ConnectionName $connectionName\n\n        # See if it was created\n        $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleHostName $addRoleHostName -RoleName $addRoleName\n            \n        # Check array\n        if ($userInRole -eq $true)\n        {\n            # Success\n            Write-Output \"$addUserName@$addUserHostName added to $addRoleName@$addRoleHostName successfully!\"\n        }\n        else\n        {\n            # Failed\n            Write-Error \"Failure adding $addUserName@$addUserHostName to $addRoleName@$addRoleHostName!\"\n        }\n    }\n    else\n    {\n    \t# Display message\n        Write-Output \"User $addUsername@$addUserHostName is already in role $addRoleName@$addRoleHostName\"\n    }\n}\nfinally\n{\n\t# Close connection if open\n    if ((Test-SqlConnection -ConnectionName $connectionName) -eq $true)\n    {\n    \tClose-SqlConnection -ConnectionName $connectionName\n    }\n}\n"
    },
    "Parameters": [
        {
            "Id": "80bf18c2-a2ea-4499-a33d-eea226b9727a",
            "Name": "addMySQLServerName",
            "Label": "MySQL Server name",
            "HelpText": "Name of the MySQL database server",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "2eba54c0-293c-4009-aef0-077b91b568b4",
            "Name": "addMySQLServerPort",
            "Label": "Port",
            "HelpText": "Port the MySQL listens on.",
            "DefaultValue": "3306",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "c8732b96-bedd-4e4a-be2d-941315e1bddd",
            "Name": "addLoginWithAddRoleRights",
            "Label": "Login name",
            "HelpText": "Login name of a user that can add roles to other users.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "4b669f8a-7309-4aed-81ff-cd5b3ebf5342",
            "Name": "addLoginPasswordWithAddRoleRights",
            "Label": "Login password",
            "HelpText": "Password for the login account.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "7db3f187-ca97-42cc-a10e-fa5cc3f1382c",
            "Name": "addUsername",
            "Label": "User name",
            "HelpText": "Name of the user to add the role to.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "052563dd-c831-4f09-8d59-1e54bc30afa0",
            "Name": "addUserHostname",
            "Label": "User Hostname",
            "HelpText": "Hostname for the user account.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "885c5057-f859-4bed-a765-03c568f9e9a2",
            "Name": "addRoleName",
            "Label": "Role name",
            "HelpText": "Name of the role to add to the user.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "302ac0ce-3128-45bc-8006-ac92a59b7141",
            "Name": "addRoleHostName",
            "Label": "Role hostname",
            "HelpText": "Hostname of the role.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "a54387ea-9e98-45a2-93e9-214ff2fcf67f",
            "Name": "addUseSSL",
            "Label": "Use SSL",
            "HelpText": "Check this box to force the use of SSL.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            }
        },
        {
            "Id": "89de7391-de67-46cf-b19c-a7b219280dc9",
            "Name": "mySqlAuthenticationMethod",
            "Label": "MySQL Authentication Method",
            "HelpText": "Authentication method used to connect with MySQL. Options include standard Username/Password, Windows Authentication, [AWS IAM Authentication](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html), [Azure Managed Identity](https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-connect-with-managed-identity), and [Google Cloud IAM for Cloud SQL ](https://cloud.google.com/sql/docs/mysql/iam-overview)",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Select",
                "Octopus.SelectOptions": "awsiam|AWS IAM\nusernamepassword|Username/password\nwindowsauthentication|Windows Authentication\nazuremanagedidentity|Azure Managed Identity\ngcpserviceaccount|GCP IAM"
            }
        },
        {
          "Id": "a97452b5-f7ef-4b72-ab2f-b440cda16343",
          "Name": "mysqlAdditionalParameters",
          "Label": "Additional connection string parameters",
          "HelpText": "A comma-delimited list of additional parameters to add to the connection string.  ex `AllowPublicKeyRetrieval=True`\"",
          "DefaultValue": "",
          "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
          }
        }
    ],
    "StepPackageId": "Octopus.Script",
    "LastModifiedBy": "twerthi",
    "$Meta": {
      "ExportedAt": "2024-03-22T16:19:47.074Z",
      "OctopusVersion": "2024.1.12087",
      "Type": "ActionTemplate"
    },
    "Category": "mysql"
}
