{
    "Id": "4de90708-1f76-4103-ab27-e9fd1916fa07",
    "Name": "MongoDB - Create Database if not exists",
    "Description": "Creates a new database on a MongoDB server with an initial collection.",
    "ActionType": "Octopus.Script",
    "Version": 3,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-DatabaseExists\n{\n\t# Define parameters\n    param ($DatabaseName)\n    \n\t# Execute query\n    $mongodbDatabases = Get-MdbcDatabase\n    \n    return $mongodbDatabases.DatabaseNamespace -contains $DatabaseName\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"Mdbc\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Use specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\n# Connect to mongodb instance\n$connectionUrl = \"mongodb://$($MongoDBUsername):$($MogoDBUserpassword)@$($MongoDBServerName):$($MongoDBPort)\"\n\n# Connect to MongoDB server\nConnect-Mdbc $connectionUrl \"admin\"\n\n# Get whether the database exits\nif ((Get-DatabaseExists -DatabaseName $MongoDBDatabaseName) -ne $true)\n{\n\t# Create database\n    Write-Output \"Database $MongoDBDatabaseName doesn't exist.\"\n    Connect-Mdbc $connectionUrl \"$MongoDBDatabaseName\"\n    \n    # Databases don't get created unless some data has been added\n    Add-MdbcCollection $MongoDBInitialCollection\n    \n    # Check to make sure it was successful\n    if ((Get-DatabaseExists -DatabaseName $MongoDBDatabaseName))\n    {\n    \t# Display success\n        Write-Output \"$MongoDBDatabaseName created successfully.\"        \n    }\n    else\n    {\n    \tWrite-Error \"Failed to create $MongoDBDatabaseName!\"\n    }\n}\nelse\n{\n\tWrite-Output \"Database $MongoDBDatabaseName already exists.\"\n}\n\n\n\n\n\n\n"
    },
    "Parameters": [
      {
        "Id": "d6343cb6-40d3-47a8-898f-ff3aeb6f9c1a",
        "Name": "MongoDBServerName",
        "Label": "Server Name",
        "HelpText": "Name or IP address of the MongoDB server instance.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "75eae92c-0081-481b-b79a-73524a798349",
        "Name": "MongoDBPort",
        "Label": "Port",
        "HelpText": "Port number the MongoDB instance is listening on.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "dbb4ef7a-ab79-4036-ac7b-466d683341f5",
        "Name": "MongoDBDatabaseName",
        "Label": "Database Name",
        "HelpText": "Name of the database to create.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "8fabfc02-2f33-4663-9af3-b8c2f74e0175",
        "Name": "MongoDBInitialCollection",
        "Label": "Initial Collection",
        "HelpText": "Name of the Initial Collection in the database.",
        "DefaultValue": "",
        "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
      },
      {
        "Id": "0f0612d3-e039-4940-bcb7-a3333266ae95",
        "Name": "MongoDBUsername",
        "Label": "Username",
        "HelpText": "Username to connect with.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "fbdb0e70-33d5-41a6-b316-66f1be7e5a18",
        "Name": "MogoDBUserpassword",
        "Label": "Password",
        "HelpText": "Password for the user to connect with.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      }
    ],
    "$Meta": {
      "ExportedAt": "2020-12-02T20:27:29.307Z",
      "OctopusVersion": "2020.5.0",
      "Type": "ActionTemplate"
    },
    "LastModifiedOn": "2021-07-26T16:50:00.000+00:00",
    "LastModifiedBy": "bobjwalker",
    "Category": "mongodb"
  }