{
  "Id": "0b753c94-c12b-46f3-bb82-459e27bbe812",
  "Name": "Variables - Find Unreplaced",
  "Description": "Searches `Web.config` or `App.config` files looking for Octopus Deploy variables that have not been replaced. Alternatively, any arbitrary file can be checked.",
  "ActionType": "Octopus.Script",
  "Version": 26,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "function Find-Unreplaced {\n    <#\n    .SYNOPSIS\n        Looks for Octopus Deploy variables\n    .DESCRIPTION\n        Analyses `Web/App.Release.configs`, etc... looking for Octopus Deploy \n        variables that have not been replaced.\n    .EXAMPLE\n        Find-Unreplaced C:\\Folder *.config, *.ps1 \n    .PARAMETER Path\n        Root folder to search in\n    .PARAMETER Files\n        An array of all the files or globs to search in. Defaults to *.config\n    .PARAMETER Exclude\n        Files to ignore\n    .PARAMETER Recurse\n        Should the cmdlet look for the file types recursively\n    .PARAMETER TreatAsError\n        Will cause the script to write an Error instead of a warning if variables are found\n    #>\n    [CmdletBinding()]\n    param \n    (\n        [Parameter(\n            Position=0,\n            Mandatory=$true,\n            ValueFromPipeline=$True)]\n        [string] $Path,\n        \n        [Parameter(\n            Position=1,\n            Mandatory=$false)]\n        [string[]] $Files = @('*.config'),\n        \n        [Parameter(Mandatory=$false)]\n        [string[]] $Exclude,\n        \n        [Parameter(Mandatory=$false)]\n        [switch] $Recurse,\n        \n        [Parameter(Mandatory=$false)]\n        [switch] $TreatAsError\n    )\n\n    process {\n        Write-Host \"Searching for files in '$Path'\"\n        if (-not (Test-Path $Path -PathType container)) {\n            Write-Error \"The path '$Path' does not exist or is not a folder.\"\n            return\n        }\n        \n        if (-not $Recurse) {\n            # For some reason, a splat is required when not recursing\n            if ($Path.EndsWith(\"\\\")) { $Path += \"*\" } else { $Path += \"\\*\" }\n        }\n\n        $clean = $true\n\n        $found = Get-ChildItem -Path $Path -Recurse:$Recurse -Include $Files -Exclude $Exclude -File\n        foreach ($file in $found) {\n            Write-Host \"Found '$file'.`nSearching for Octopus variables...\" -NoNewline\n            $matches = Select-String -Path $file -Pattern \"#\\{([^}]*)\\}\" -AllMatches\n            $clean = $clean -and ($matches.Count -eq 0)\n            if ($clean) {\n                Write-Host \"clean\"\n            } else {\n                Write-Host \"done`n$matches\"\n            }\n        }\n\n        if (-not $clean) {\n            $msg = \"Unreplaced Octopus Variables were found.\"\n            if ($TreatAsError) {\n                Write-Error $msg\n            } else {\n                Write-Warning $msg\n            }\n        }\n    }\n}\n\nif (-not $Path) { throw \"A Path must be specified\" }\nif (-not $Files) { throw \"At least one File must be specified\" }\n\n$spPaths = $Path -split \"`n\" | Foreach-Object { $_.Trim() } | Where-Object { -not [string]::IsNullOrEmpty($_) }\n$spFiles = $Files -split \";\" | Foreach-Object { $_.Trim() } \n$spExcludes = $Exclude -split \";\" | Foreach-Object { $_.Trim() } \n$bRecurse = $Recurse -eq 'True'\n$bTreatAsError = $TreatAsError -eq 'True'\n\n$spPaths | Find-Unreplaced -Files $spFiles -Exclude $spExcludes -Recurse:$bRecurse -TreatAsError:$bTreatAsError\n\n",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptSource": "Inline"
  },
  "Parameters": [
    {
      "Id": "7809f4f9-7388-4067-ae0f-e5d858ad9395",
      "Name": "Path",
      "Label": "Path",
      "HelpText": "The folders to search for files in. Enter multiple paths on separate lines.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "MultiLineText"
      }
    },
    {
      "Id": "f9389ec3-1602-48b1-9f03-c95af304a3c2",  
      "Name": "Files",
      "Label": "Files",
      "HelpText": "An array of all the files or globs to search in. Defaults to `*.config`. Multiple items can be separated with a semicolon `;`.",
      "DefaultValue": "*.config",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "0b54fdbd-12ac-4fc8-aa26-410cd1a3bd77",  
      "Name": "Exclude",
      "Label": "Exclude",
      "HelpText": "Files or globs to ignore. Multiple items can be separated with a semicolon `;`.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "29f81ee9-529b-45f6-8452-8e8f464c3225",  
      "Name": "Recurse",
      "Label": "Recurse",
      "HelpText": "Determines whether or not the step should look through the items in `Path` recursively.",
      "DefaultValue": "True",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    },
    {
      "Id": "fd64a155-abe9-483e-b954-e182fbb777b0",  
      "Name": "TreatAsError",
      "Label": "Treat as an error?",
      "HelpText": "Determines if the step will cause the build to fail or issue a warning. By default it will only warn of a problem.",
      "DefaultValue": "False",
      "DisplaySettings": {
        "Octopus.ControlType": "Checkbox"
      }
    }
  ],
  "LastModifiedOn": "2021-09-14T10:40:15.430Z",
  "LastModifiedBy": "harrisonmeister",
  "$Meta": {
    "ExportedAt": "2021-09-14T10:40:15.430Z",
    "OctopusVersion": "2021.2.7428",
    "Type": "ActionTemplate"
  },
  "Category": "octopus"
}