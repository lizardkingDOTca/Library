{
    "Id": "f035cbb1-3400-4808-bfde-d5a8aaf36cf1",
    "Name": "MySQL - Execute Command",
    "Description": "Enables ad-hoc command execution on a MySQL server",
    "ActionType": "Octopus.Script",
    "Version": 3,
    "Author": "coryreid",
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled {\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName)) {\n        # It is installed\n        return $true\n    }\n    else {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule {\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n    # Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false) {\n        # Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n    # Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled {\n    # See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true) {\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true) {\n    # Use specific version\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\n# Get whether trust certificate is necessary\n$mySqlTrustSSL = [System.Convert]::ToBoolean(\"$mySqlTrustSSL\")\n\ntry {\n    # Declare initial connection string\n    $connectionString = \"Server=$mySqlServerName;Port=$mySqlServerPort;Database=$mySqlDatabaseName;\"\n    \n    # Check to see if we need to trust the ssl cert\n    if ($mySqlTrustSSL -eq $true) {\n        # Append SSL connection string components\n        $connectionString += \"SslMode=Required;\"\n    }\n\n    # Update the connection string based on authentication method\n    switch ($mySqlAuthenticationMethod) {\n        \"azuremanagedidentity\" {\n            # Get login token\n            Write-Host \"Generating Azure Managed Identity token ...\"\n            $token = Invoke-RestMethod -Method GET -Uri \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://ossrdbms-aad.database.windows.net\" -Headers @{\"MetaData\" = \"true\" }\n            \n            # Append remaining portion of connection string\n            $connectionString += \";Uid=$mySqlUsername;Pwd=`\"$($token.access_token)`\";\"\n            \n            break\n        }\n        \"awsiam\" {\n            # Region is part of the RDS endpoint, extract\n            $region = ($mySqlServerName.Split(\".\"))[2]\n\n            Write-Host \"Generating AWS IAM token ...\"\n            $mySqlPassword = (aws rds generate-db-auth-token --hostname $mySqlServerName --region $region --port $mySqlServerPort --username $mySqlUsername)\n\n            # Append remaining portion of connection string\n            $connectionString += \";Uid=$mySqlUsername;Pwd=`\"$mySqlPassword`\";\"\n\n            break\n        }\n        \"gcpserviceaccount\" {\n            # Define header\n            $header = @{ \"Metadata-Flavor\" = \"Google\" }\n\n            # Retrieve service accounts\n            $serviceAccounts = Invoke-RestMethod -Method Get -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/\" -Headers $header\n\n            # Results returned in plain text format, get into array and remove empty entries\n            $serviceAccounts = $serviceAccounts.Split([Environment]::NewLine, [StringSplitOptions]::RemoveEmptyEntries)\n\n            # Retreive the specific service account assigned to the VM\n            $serviceAccount = $serviceAccounts | Where-Object { $_.Contains(\"iam.gserviceaccount.com\") }\n\n            Write-Host \"Generating GCP IAM token ...\"\n            # Retrieve token for account\n            $token = Invoke-RestMethod -Method Get -Uri \"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/$serviceAccount/token\" -Headers $header\n            \n            # Check to see if there was a username provided\n            if ([string]::IsNullOrWhitespace($mySqlUsername)) {\n                # Use the service account name, but strip off the .gserviceaccount.com part\n                $mySqlUsername = $serviceAccount.SubString(0, $serviceAccount.IndexOf(\".gserviceaccount.com\"))\n            }\n\n            # Append remaining portion of connection string\n            $connectionString += \";Uid=$mySqlUsername;Pwd=`\"$($token.access_token)`\";\"\n\n            break\n        }\n        \"usernamepassword\" {\n            # Append remaining portion of connection string\n            $connectionString += \";Uid=$mySqlUsername;Pwd=`\"$mySqlPassword`\";\"\n\n            break    \n        }\n\n        \"windowsauthentication\" {\n            # Append remaining portion of connection string\n            $connectionString += \";Integrated Security=True;\"\n        }\n    }\n\n    # Open connection\n    Open-MySqlConnection -ConnectionString $connectionString\n\n    # Execute the statement\n    $executionResult = Invoke-SqlUpdate -Query \"$mySqlCommand\" -CommandTimeout $mySqlCommandTimeout\n    \n    # Display the result\n    Get-SqlMessage\n}\nfinally {\n    Close-SqlConnection\n}\n\n\n"
    },
    "Parameters": [
        {
            "Id": "c1126889-66f0-4bcf-8fca-8164097e73ee",
            "Name": "mySqlServerName",
            "Label": "Server",
            "HelpText": "Hostname (or IP) of the MySQL database server.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "28f4f93c-c6a0-40fd-a0db-5d6830c9779a",
            "Name": "mySqlAuthenticationMethod",
            "Label": "Authentication Method",
            "HelpText": "Method used to authenticate to the MySQL server.",
            "DefaultValue": "usernamepassword",
            "DisplaySettings": {
                "Octopus.ControlType": "Select",
                "Octopus.SelectOptions": "awsiam|AWS EC2 IAM Role\nazuremanagedidentity|Azure Managed Identity\ngcpserviceaccount|GCP Service Account\nusernamepassword|Username\\Password\nwindowsauthentication|Windows Authentication"
            }
        },
        {
            "Id": "a8563d9f-6ce3-4965-9f04-9fab03ec9385",
            "Name": "mySqlUsername",
            "Label": "Username",
            "HelpText": "Username to use for the connection",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "19693759-b161-454f-86cc-535788da366e",
            "Name": "mySqlPassword",
            "Label": "Password",
            "HelpText": "Password for the user account",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "Sensitive"
            }
        },
        {
            "Id": "a5e1378b-990a-4ffe-a675-16d6c5f6b802",
            "Name": "mySqlDatabaseName",
            "Label": "Database Name",
            "HelpText": "Name of the database to execute against.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "b2206d1e-cf1e-4305-b58a-0abf835ccc9a",
            "Name": "mySqlServerPort",
            "Label": "Server Port",
            "HelpText": "Port for the database instance.",
            "DefaultValue": "3306",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "fda16aec-ebcc-47f2-9294-7b37b985209c",
            "Name": "mySqlTrustSSL",
            "Label": "Trust SSL Certificate",
            "HelpText": "Force trusting an SSL Certificate.",
            "DefaultValue": "False",
            "DisplaySettings": {
                "Octopus.ControlType": "Checkbox"
            }
        },
        {
            "Id": "786d615c-e7cd-4f1d-adb0-7787bd26c476",
            "Name": "mySqlCommandTimeout",
            "Label": "Command Timeout",
            "HelpText": "Timeout value (in seconds) for SQL commands.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "SingleLineText"
            }
        },
        {
            "Id": "0b10867f-b061-4cab-8044-175e6469e1e1",
            "Name": "mySqlCommand",
            "Label": "Command",
            "HelpText": "SQL statement(s) to execute.",
            "DefaultValue": "",
            "DisplaySettings": {
                "Octopus.ControlType": "MultiLineText"
            }
        }
    ],
    "StepPackageId": "Octopus.Script",
    "$Meta": {
        "ExportedAt": "2022-06-22T18:37:20.847Z",
        "OctopusVersion": "2022.3.1455",
        "Type": "ActionTemplate"
    },
    "LastModifiedBy": "coryreid",
    "Category": "mysql"
}
