{
  "Id": "dd76dee1-f5b1-4974-a5ae-bde643cf67af",
  "Name": "Git - Tag repository",
  "Description": "Tags a git repository with the specified tag",
  "ActionType": "Octopus.Script",
  "Version": 2,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "Function Invoke-Git\n{\n\t# Define parameters\n    param (\n    \t$GitRepositoryUrl,\n        $GitFolder,\n        $GitUsername,\n        $GitPassword,\n        $GitCommand,\n        $AdditionalArguments,\n        $SupressOutput = $false\n    )\n    \n    # Get current work folder\n    $workDirectory = Get-Location\n    \n    # Create arguments array\n    $gitArguments = @()\n    $gitArguments += $GitCommand\n    \n    # Check for url\n    if (![string]::IsNullOrWhitespace($GitRepositoryUrl))\n    {\n      # Convert url to URI object\n      $gitUri = [System.Uri]$GitRepositoryUrl\n      $gitUrl = \"{0}://{1}:{2}@{3}:{4}{5}\" -f $gitUri.Scheme, $GitUsername, $GitPassword, $gitUri.Host, $gitUri.Port, $gitUri.PathAndQuery\n      $gitArguments += $gitUrl\n\n      # Get the newly created folder name\n      $gitFolderName = $GitRepositoryUrl.SubString($GitRepositoryUrl.LastIndexOf(\"/\") + 1)\n      if ($gitFolderName.Contains(\".git\"))\n      {\n          $gitFolderName = $gitFolderName.SubString(0, $gitFolderName.IndexOf(\".\"))\n      }\n    }\n   \n    \n    # Check for additional arguments\n    if ($null -ne $AdditionalArguments)\n    {\n \t\t# Add the additional arguments\n        $gitArguments += $AdditionalArguments\n    }\n    \n    # Execute git command\n    $results = Execute-Command \"git\" $gitArguments $GitFolder\n    \n    # Check to see if output is supposed to be suppressed\n    if ($SupressOutput -ne $true)\n    {\n    \tWrite-Host $results.stdout\n    }\n\n\t# Always display error messages\n    Write-Host $results.stderr\n    \n    # Store results into file\n    Add-Content -Path \"$PWD/$($GitCommand).txt\" -Value $results.stdout\n    \n    # Return the foldername\n   \treturn $gitFolderName\n}\n\n# Check to see if $IsWindows is available\nif ($null -eq $IsWindows) {\n    Write-Host \"Determining Operating System...\"\n    $IsWindows = ([System.Environment]::OSVersion.Platform -eq \"Win32NT\")\n    $IsLinux = ([System.Environment]::OSVersion.Platform -eq \"Unix\")\n}\n\nFunction Execute-Command\n{\n\tparam (\n    \t$commandPath,\n        $commandArguments,\n        $workingDir\n    )\n\n\t$gitExitCode = 0\n    $executionResults = $null\n\n  Try {\n    $pinfo = New-Object System.Diagnostics.ProcessStartInfo\n    $pinfo.FileName = $commandPath\n    $pinfo.WorkingDirectory = $workingDir\n    $pinfo.RedirectStandardError = $true\n    $pinfo.RedirectStandardOutput = $true\n    $pinfo.UseShellExecute = $false\n    $pinfo.Arguments = $commandArguments\n    $p = New-Object System.Diagnostics.Process\n    $p.StartInfo = $pinfo\n    $p.Start() | Out-Null\n    $executionResults = [pscustomobject]@{\n        stdout = $p.StandardOutput.ReadToEnd()\n        stderr = $p.StandardError.ReadToEnd()\n        ExitCode = $null\n    }\n    $p.WaitForExit()\n    $gitExitCode = [int]$p.ExitCode\n    $executionResults.ExitCode = $gitExitCode\n    \n    if ($gitExitCode -ge 2) \n    {\n\t\t# Fail the step\n        throw\n    }\n    \n    return $executionResults\n  }\n  Catch {\n    # Check exit code\n    Write-Error -Message \"$($executionResults.stderr)\" -ErrorId $gitExitCode\n    exit $gitExitCode\n  }\n\n}\n\n\n# Get variables\n$gitUrl = $OctopusParameters['Template.Git.Repo.Url']\n$gitUser = $OctopusParameters['Template.Git.User.Name']\n$gitPassword = $OctopusParameters['Template.Git.User.Password']\n$gitTag = $OctopusParameters['Template.Git.Tag']\n$gitAction = $OctopusParameters['Template.Git.Action']\n\n# Clone repository\n$folderName = Invoke-Git -GitRepositoryUrl $gitUrl -GitUsername $gitUser -GitPassword $gitPassword -GitCommand \"clone\"\n\n# Set user\n$gitAuthorName = $OctopusParameters['Octopus.Deployment.CreatedBy.DisplayName']\n$gitAuthorEmail = $OctopusParameters['Octopus.Deployment.CreatedBy.EmailAddress']\n\n# Check to see if user is system\nif ([string]::IsNullOrWhitespace($gitAuthorEmail) -and $gitAuthorName -eq \"System\")\n{\n\t# Initiated by the Octopus server via automated process, put something in for the email address\n    $gitAuthorEmail = \"system@octopus.local\"\n}\n\n# Configure user information\nInvoke-Git -GitCommand \"config\" -AdditionalArguments @(\"user.name\", $gitAuthorName) -GitFolder \"$($PWD)/$($folderName)\"\nInvoke-Git -GitCommand \"config\" -AdditionalArguments @(\"user.email\", $gitAuthorEmail) -GitFolder \"$($PWD)/$($folderName)\"\n\n# Record existing tags, if any\nInvoke-Git -GitCommand \"tag\" -GitFolder \"$($PWD)/$($folderName)\" -SupressOutput $true\n\n# Check the file\n$existingTags = Get-Content \"$PWD/tag.txt\"\n\nif (![String]::IsNullOrWhitespace($existingTags))\n{\n\t# Parse\n    $existingTags = $existingTags.Split(\"`n\",[System.StringSplitOptions]::RemoveEmptyEntries)\n    \n    # Check to see if tag already exists\n    if ($null -ne ($existingTags | Where-Object {$_ -eq $gitTag}))\n    {\n\t\t# Check the selected action\n        switch ($gitAction)\n        {\n        \t\"delete\"\n            {\n                # Delete the tag locally\n                Write-Host \"Deleting tag $gitTag from cloned repository ...\"\n                Invoke-Git -GitCommand \"tag\" -AdditionalArguments @(\"--delete\", \"$gitTag\") -GitFolder \"$($PWD)/$($folderName)\"\n                \n                # Delete the tag on remote\n                Write-Host \"Deleting tag from remote repository ...\"\n                Invoke-Git -GitCommand \"push\" -AdditionalArguments @(\":refs/tags/$gitTag\") -GitFolder \"$($PWD)/$($folderName)\" -GitRepositoryUrl $gitUrl -GitUsername $gitUser -GitPassword $gitPassword\n                \n                break\n            }\n            \"ignore\"\n            {\n            \t# Ignore and continue\n                Write-Host \"$gitTag already exists on $gitUrl.  Selected action is Ignore, exiting.\"\n                \n                exit 0\n            }\n            \"fail\"\n            {\n\t\t\t\t# Error, tag already exists\n        \t\tWrite-Error \"Error: $gitTag already exists on $gitUrl!\"\n            }\n        }\n    }\n}\n\n# Tag the repo\nInvoke-Git -GitCommand \"tag\" -AdditionalArguments @(\"-a\", $gitTag, \"-m\", \"`\"Tag from #{Octopus.Project.Name} release version #{Octopus.Release.Number}`\"\") -GitFolder \"$($PWD)/$($folderName)\"\n\n# Push the new tag\nInvoke-Git -Gitcommand \"push\" -AdditionalArguments @(\"--tags\") -GitFolder \"$($PWD)/$($folderName)\""
  },
  "Parameters": [
    {
      "Id": "674d5325-aa93-4779-a734-cee8e5690f17",
      "Name": "Template.Git.Repo.Url",
      "Label": "Git Repository URL",
      "HelpText": "The URL used for the `git clone` operation.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f2d07c9c-85fc-485e-8057-5577efd9a26d",
      "Name": "Template.Git.User.Name",
      "Label": "Git Username",
      "HelpText": "Username of the credentials to use to log into git.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "597ae9a5-1ef4-4062-a435-2d9bb1fb16a2",
      "Name": "Template.Git.User.Password",
      "Label": "Git User Password",
      "HelpText": "Password for the git credential.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "7cfa6ba5-76c6-4b15-a30c-593e2cd8f914",
      "Name": "Template.Git.Tag",
      "Label": "Tag",
      "HelpText": "The tag name to tag the repository with.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "b7ae407f-f926-4478-af72-74397025e4b6",
      "Name": "Template.Git.Action",
      "Label": "Action if tag already exists",
      "HelpText": "Select the action if the tag already exsists.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Select",
        "Octopus.SelectOptions": "delete|Delete and recreate\nfail|Fail\nignore|Ignore"
      }
    }
  ],
  "StepPackageId": "Octopus.Script",
  "$Meta": {
    "ExportedAt": "2023-09-12T15:33:15.238Z",
    "OctopusVersion": "2023.4.2661",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "twerthi",
  "Category": "git"
}
